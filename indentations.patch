src/benchCurrent/JsonStringEscapingBench.cs --- C#
.   1 using System;.   2 using System.IO;.   3 using bench.json;.   4 using bench.json.model;.   5 using BenchmarkDotNet.Attributes;.   6 using BenchmarkDotNet.Configs;.   7 using BenchmarkDotNet.Jobs;.   8 using BenchmarkDotNet.Toolchains.CsProj;.   9 using simpleExpressionParser;.  10 using sly.parser;.  11 using sly.parser.generator;.  12 1  13 namespace benchCurrent;2  14 .  15 .  16 [MemoryDiagnoser].  17     .  18 [Config(typeof(JsonStringEscapingBench.Config))]3  19 public class JsonStringEscapingBench4  20 {5  21     private class Config : ManualConfig.  22     {.  23         public Config().  24         {.  25             var baseJob = Job.MediumRun.With(CsProjCoreToolchain.NetCoreApp70);.  26         }.  27     }.  28     .  29     private Parser<JsonTokenGeneric, JSon> escapedJsonParser;.  30     private Parser<JsonTokenGenericStringNotEscaped, JSon> unescapedJsonParser;.  31     .  32     private string content = "";.  33     .  34     [GlobalSetup].  35     public void Setup().  36     {.  37         Console.WriteLine(("SETUP"));.  38         content = File.ReadAllText("test.json");.  39         Console.WriteLine("json read.");.  40         var jsonParser = new EbnfJsonGenericParser();.  41         var builder = new ParserBuilder<JsonTokenGeneric, JSon>();.  42             .  43         var result = builder.BuildParser(jsonParser, ParserType.EBNF_LL_RECURSIVE_DESCENT, "root");.  44         Console.WriteLine("parser built.");.  45         if (result.IsError).  46         {.  47             Console.WriteLine("ERROR");.  48             result.Errors.ForEach(Console.WriteLine);.  49         }.  50         else.  51         {.  52             Console.WriteLine("parser ok");.  53             escapedJsonParser = result.Result;.  54         }.  55             .  56         var notJsonParser = new EbnfJsonGenericParserStringNotEscaped();.  57         var builderNot = new ParserBuilder<JsonTokenGenericStringNotEscaped, JSon>();.  58             .  59         var resultNot = builderNot.BuildParser(notJsonParser, ParserType.EBNF_LL_RECURSIVE_DESCENT, "root");.  60         Console.WriteLine("parser built.");.  61         if (resultNot.IsError).  62         {.  63             Console.WriteLine("ERROR");.  64             resultNot.Errors.ForEach(Console.WriteLine);.  65         }.  66         else.  67         {.  68             Console.WriteLine("parser ok");.  69             unescapedJsonParser = resultNot.Result;.  70         }.  71     }.  72     .  73     [Benchmark].  74         .  75     public void TestEscapedJson().  76     {.  77             .  78             .  79         if (escapedJsonParser == null).  80         {.  81             Console.WriteLine("parser is null");.  82         }.  83         else.  84         {.  85             var ignored = escapedJsonParser.Parse(content);    .  86         }.  87     }.  88     .  89     [Benchmark].  90         .  91     public void TestUnescapedJson().  92     {.  93             .  94             .  95         if (unescapedJsonParser == null).  96         {.  97             Console.WriteLine("parser is null");.  98         }.  99         else. 100         {. 101             var ignored = unescapedJsonParser.Parse(content);    . 102         }. 103     }. 104     6 105 }
src/sly/lexer/LexerPosition.cs --- 1/2 --- C#
20             Line = line; 20             Line = line;
21             Column = column; 21             Column = column;
22             Mode = mode; 22             Mode = mode;
..                                      23             Indentation = null;
23         } 24         }
24                                      25         
25         private LexerPosition(int in 26         private LexerPosition(int ind
.. dex, int line, int column, int curre .. ex, int line, int column, int current
.. ntIndentation, string mode = ModeAtt .. Indentation, string mode = ModeAttrib
.. ribute.DefaultLexerMode) : this(inde .. ute.DefaultLexerMode) : this(index, l
.. x, line, column, mode) .. ine, column, mode)
26         { 27         {
27             CurrentIndentation = cur 28             CurrentIndentation = curr
.. rentIndentation; .. entIndentation;
..                                      29             Indentation = new LexerIn
..                                      .. dentation();
28         } 30         }
29                                      31 
30         public bool IsStartOfLine => 32         public bool IsStartOfLine => 
..  Column == 0; .. Column == 0;
31                                      33 
32         public int CurrentIndentatio 34         public int CurrentIndentation
.. n { get; set; } ..  { get; set; }
33                                      35 
34         [JsonIgnore] 36         [JsonIgnore]
35         public LexerIndentation Inde 37         public LexerIndentation Inden
.. ntation { get; set; } = new LexerInd .. tation { get; set; } //= new LexerInd
.. entation(); .. entation();
36                                      38 
37         public int Column { get; set 39         public int Column { get; set;
.. ; } ..  }
38         public int Index { get; set; 40         public int Index { get; set; 
    }    }

src/sly/lexer/LexerPosition.cs --- 2/2 --- C#
70 72         {71 73             return new LexerPosition(Index, Line, Column, CurrentIndentation)72 74             {73 75                 Indentation = this.Indentation?.Clone(),74 76                 Mode = Mode,75 77                 IsPop = IsPop,76 78                 IsPush = IsPush,
src/sly/lexer/fsm/FSMLexer.cs --- C#
308 308             {309 309                 var shifts = GetIndentations(source, lexerPosition.Index);310 310                 string currentShift = string.Join("", shifts);... 311                 lexerPosition.Indentation = lexerPosition.Indentation ?? new LexerIndentation();311 312                 var indentation = lexerPosition.Indentation.Indent(currentShift);312 313                 switch (indentation.type)313 314                 {
