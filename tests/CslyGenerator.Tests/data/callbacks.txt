public class ParserCallbacks
{
        
}

[ParserGenerator(typeof(CallbackTokens),typeof(ParserCallbacks), typeof(object))]
public partial class ParserCallbacksGenerator
{
        
}

    public class TestCallbacks
    {

        [TokenCallback((int)CallbackTokens.IDENTIFIER)]
        public static Token<CallbackTokens> TranslateIdentifier(Token<CallbackTokens> token)
        {
            if (token.Value.StartsWith("b"))
            {
                token.TokenID = CallbackTokens.SKIP;
            }
            token.SpanValue = new ReadOnlyMemory<char>(token.Value.ToUpper().ToCharArray());
            
            return token;
        } 
        
    }
    
        [CallBacks(typeof(TestCallbacks))]
        public enum CallbackTokens
        {
            [Lexeme(GenericToken.KeyWord, "SKIP")] [Lexeme(GenericToken.KeyWord, "skip")]
            SKIP = 6,
            [LexemeLabel("en","identifier")]
            [LexemeLabel("fr","identifiant")]
            [Lexeme(GenericToken.Identifier,IdentifierType.Alpha)] IDENTIFIER = 20,
            EOF = 0
    
            #endregion
        }