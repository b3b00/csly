using sly.lexer;

namespace ParserTests.issue457;

[Lexer(IndentationAWare = true, KeyWordIgnoreCase = true)]
public enum Issue457Lexer
{
  	#region Non-Terminal Constants
		[Lexeme(GenericToken.Identifier, IdentifierType.AlphaNumericDash)]
		IDENTIFIER = 1,

		[Lexeme(GenericToken.Int)] DECLITERAL,
		[Lexeme(GenericToken.Double)] REALLITERAL,
		[Lexeme(GenericToken.Hexa)] HEXLITERAL,

		[Lexeme(GenericToken.String, "\"", "\\")]
		[Lexeme(GenericToken.String, "'", "\\")]
		STRING,

		[Comment("#", "\"\"\"", "\"\"\"")] COMMENT,
		
		#endregion

		#region KeyWords
		[Lexeme(GenericToken.KeyWord, "anchor")] ANCHOR,
		[Lexeme(GenericToken.KeyWord, "and")] AND,
		[Lexeme(GenericToken.KeyWord, "animation")] ANIMATION,
		[Lexeme(GenericToken.KeyWord, "ariana")] ARIANA,
		[Lexeme(GenericToken.KeyWord, "as")] AS,
		[Lexeme(GenericToken.KeyWord, "at")] AT,
		[Lexeme(GenericToken.KeyWord, "auto")] AUTO,
		[Lexeme(GenericToken.KeyWord, "behind")] BEHIND,
		[Lexeme(GenericToken.KeyWord, "blinds")] BLINDS,
		[Lexeme(GenericToken.KeyWord, "block")] BLOCK,
		[Lexeme(GenericToken.KeyWord, "blur")] BLUR,
		[Lexeme(GenericToken.KeyWord, "break")] BREAK,
		[Lexeme(GenericToken.KeyWord, "call")] CALL,
		[Lexeme(GenericToken.KeyWord, "camera")] CAMERA,
		[Lexeme(GenericToken.KeyWord, "case")] CASE,
		[Lexeme(GenericToken.KeyWord, "center")] CENTER,
		[Lexeme(GenericToken.KeyWord, "character")] CHARACTER,
		[Lexeme(GenericToken.KeyWord, "choice")] CHOICE,
		[Lexeme(GenericToken.KeyWord, "class")] CLASS, 
		[Lexeme(GenericToken.KeyWord, "contains")] CONTAINS,
		[Lexeme(GenericToken.KeyWord, "continue")] CONTINUE,
		[Lexeme(GenericToken.KeyWord, "def")] DEF,
		[Lexeme(GenericToken.KeyWord, "default")] DEFAULT,
		[Lexeme(GenericToken.KeyWord, "define")] DEFINE,
		[Lexeme(GenericToken.KeyWord, "dissolve")] DISSOLVE,
		[Lexeme(GenericToken.KeyWord, "ease")] EASE,
		[Lexeme(GenericToken.KeyWord, "elif")] ELIF,
		[Lexeme(GenericToken.KeyWord, "else")] ELSE,
		[Lexeme(GenericToken.KeyWord, "exit")] RXIT,
		[Lexeme(GenericToken.KeyWord, "expression")] EXPRESSION,
		[Lexeme(GenericToken.KeyWord, "except")] EXCEPT,
		[Lexeme(GenericToken.KeyWord, "fade")] FADE,
		[Lexeme(GenericToken.KeyWord, "fadein")] FADEIN,
		[Lexeme(GenericToken.KeyWord, "fadeout")] FADEOUT,
		[Lexeme(GenericToken.KeyWord, "false")] FALSE,
		[Lexeme(GenericToken.KeyWord, "for")] FOR,
		[Lexeme(GenericToken.KeyWord, "frame")] FRAME,
		[Lexeme(GenericToken.KeyWord, "from")] FROM,
		[Lexeme(GenericToken.KeyWord, "function")] FUNCTION,
		[Lexeme(GenericToken.KeyWord, "global")] GLOBAL,
		[Lexeme(GenericToken.KeyWord, "hide")] HIDE,
		[Lexeme(GenericToken.KeyWord, "hpunch")] HPUNCH,
		[Lexeme(GenericToken.KeyWord, "if")] IF,
		[Lexeme(GenericToken.KeyWord, "image")] IMAGE,
		[Lexeme(GenericToken.KeyWord, "in")] IN,
		[Lexeme(GenericToken.KeyWord, "init")] INIT,
		[Lexeme(GenericToken.KeyWord, "irisin")] IRISIN,
		[Lexeme(GenericToken.KeyWord, "import")] IMPORT,
		[Lexeme(GenericToken.KeyWord, "is")] IS,
		[Lexeme(GenericToken.KeyWord, "jsondb")] JSONDB,
		[Lexeme(GenericToken.KeyWord, "jump")] JUMP,
		[Lexeme(GenericToken.KeyWord, "label")] LABEL,
		[Lexeme(GenericToken.KeyWord, "lambda")] LAMBDA,
		[Lexeme(GenericToken.KeyWord, "layeredimage")] LAYEREDIMAGE,
		[Lexeme(GenericToken.KeyWord, "left")] LEFT,
		[Lexeme(GenericToken.KeyWord, "linear")] LINEAR,
		[Lexeme(GenericToken.KeyWord, "loop")] LOOP,
		[Lexeme(GenericToken.KeyWord, "match")] MATCH,
		[Lexeme(GenericToken.KeyWord, "menu")] MENU,
		[Lexeme(GenericToken.KeyWord, "move")] MOVE,
		[Lexeme(GenericToken.KeyWord, "moveinright")] MOVEINRIGHT,
		[Lexeme(GenericToken.KeyWord, "moveoutright")] MOVEOUTRIGHT,
		[Lexeme(GenericToken.KeyWord, "music")] MUSIC,
		[Lexeme(GenericToken.KeyWord, "noloop")] NOLOOP,
		[Lexeme(GenericToken.KeyWord, "none")] NONE,
		[Lexeme(GenericToken.KeyWord, "not")] NOT,
		[Lexeme(GenericToken.KeyWord, "offscreenleft")] OFFSCREENLEFT,
		[Lexeme(GenericToken.KeyWord, "offscreenright")] OFFSCREENRIGHT,
		[Lexeme(GenericToken.KeyWord, "onlayer")] ONLAYER,
		[Lexeme(GenericToken.KeyWord, "or")] OR,
		[Lexeme(GenericToken.KeyWord, "parallel")] PARALLEL,
		[Lexeme(GenericToken.KeyWord, "pass")] PASS,
		[Lexeme(GenericToken.KeyWord, "pause")] PAUSE,
		[Lexeme(GenericToken.KeyWord, "pixellate")] PIXELLATE,
		[Lexeme(GenericToken.KeyWord, "play")] PLAY,
		[Lexeme(GenericToken.KeyWord, "pushright")] PUSHRIGHT,
		[Lexeme(GenericToken.KeyWord, "python")] PYTHON,
		[Lexeme(GenericToken.KeyWord, "queue")] QUEUE,
		[Lexeme(GenericToken.KeyWord, "range")] RANGE,
		[Lexeme(GenericToken.KeyWord, "renpy")] RENPY,
		[Lexeme(GenericToken.KeyWord, "repeat")] REPEAT,
		[Lexeme(GenericToken.KeyWord, "reset")] RESET,
		[Lexeme(GenericToken.KeyWord, "return")] RETURN,
		[Lexeme(GenericToken.KeyWord, "right")] RIGHT,
		[Lexeme(GenericToken.KeyWord, "scene")] SCENE,
		[Lexeme(GenericToken.KeyWord, "screen")] SCREEN,
		[Lexeme(GenericToken.KeyWord, "set")] SET,
		[Lexeme(GenericToken.KeyWord, "show")] SHOW,
		[Lexeme(GenericToken.KeyWord, "slideawayleft")] SLIDEAWAYLEFT,
		[Lexeme(GenericToken.KeyWord, "slideleft")] SLIDELEFT,
		[Lexeme(GenericToken.KeyWord, "sound")] SOUND,
		[Lexeme(GenericToken.KeyWord, "squares")] SQUARES,
		[Lexeme(GenericToken.KeyWord, "stop")] STOP,
		[Lexeme(GenericToken.KeyWord, "style")] STYLE,
		[Lexeme(GenericToken.KeyWord, "sys")] SYS,
		[Lexeme(GenericToken.KeyWord, "time")] TIME,
		[Lexeme(GenericToken.KeyWord, "to")] TO,
		[Lexeme(GenericToken.KeyWord, "top")] TOP,
		[Lexeme(GenericToken.KeyWord, "topleft")] TOPLEFT,
		[Lexeme(GenericToken.KeyWord, "topright")] TOPRIGHT,
		[Lexeme(GenericToken.KeyWord, "transform")] TRANSFORM,
		[Lexeme(GenericToken.KeyWord, "translate")] TRANSLATE,
		[Lexeme(GenericToken.KeyWord, "true")] TRUE,
		[Lexeme(GenericToken.KeyWord, "truecenter")] TRUECENTER,
		[Lexeme(GenericToken.KeyWord, "try")] TRY,
		[Lexeme(GenericToken.KeyWord, "voice")] VOICE,
		[Lexeme(GenericToken.KeyWord, "volume")] VOLUME,
		[Lexeme(GenericToken.KeyWord, "vpunch")] VPUNCH,
		[Lexeme(GenericToken.KeyWord, "while")] WHILE,
		[Lexeme(GenericToken.KeyWord, "window")] WINDOW,
		[Lexeme(GenericToken.KeyWord, "wipeleft")] WIPELEFT,
		[Lexeme(GenericToken.KeyWord, "with")] WITH,
		[Lexeme(GenericToken.KeyWord, "xalign")] XALIGN,
		[Lexeme(GenericToken.KeyWord, "xcenter")] XCENTER,
		[Lexeme(GenericToken.KeyWord, "yalign")] YALIGN,
		[Lexeme(GenericToken.KeyWord, "zoomin")] ZOOMIN,
		[Lexeme(GenericToken.KeyWord, "zoominout")] ZOOMINOUT,
		[Lexeme(GenericToken.KeyWord, "zoomout")] ZOOMOUT,
		[Lexeme(GenericToken.KeyWord, "zorder")] ZORDER,
		#endregion

		#region Terminal Symbols
		[Lexeme(GenericToken.SugarToken, "$")] DOLLAR,
		[Lexeme(GenericToken.SugarToken, "(")] LPAREN,
		[Lexeme(GenericToken.SugarToken, ")")] RPARAN,
		[Lexeme(GenericToken.SugarToken, "**")] PROPERTIES,
		[Lexeme(GenericToken.SugarToken, "+")] PLUS,
		[Lexeme(GenericToken.SugarToken, "-")] MINUS,
		[Lexeme(GenericToken.SugarToken, "*")] TIMES,
		[Lexeme(GenericToken.SugarToken, "/")] DIV,
		[Lexeme(GenericToken.SugarToken, "//")] FLOORDIV,
		[Lexeme(GenericToken.SugarToken, "\\")] IDIV,
		[Lexeme(GenericToken.SugarToken, "+=")] ADDASSIGN,
		[Lexeme(GenericToken.SugarToken, "-=")] MINUSASSIGN,
		[Lexeme(GenericToken.SugarToken, "*=")] TIMESASSIGN,
		[Lexeme(GenericToken.SugarToken, "/=")] DIVASSIGN,
		[Lexeme(GenericToken.SugarToken, "%=")] MODASSIGN,
		[Lexeme(GenericToken.SugarToken, "**=")] EXPASSIGN,
		[Lexeme(GenericToken.SugarToken, "&=")] ANDASSIGN,
		[Lexeme(GenericToken.SugarToken, "|=")] ORASSIGN,
		[Lexeme(GenericToken.SugarToken, "^=")] XORASSIGN,
		[Lexeme(GenericToken.SugarToken, ">>=")] RIGHTSHIFTASSIGN,
		[Lexeme(GenericToken.SugarToken, "<<=")] LEFTSHIFTASSIGN,
		[Lexeme(GenericToken.SugarToken, "%")] MOD,
		[Lexeme(GenericToken.SugarToken, ",")] COMMA,
		[Lexeme(GenericToken.SugarToken, ".")] PERIOD,
		[Lexeme(GenericToken.SugarToken, ":")] COLON,
		[Lexeme(GenericToken.SugarToken, "=")] EQUALS,
		[Lexeme(GenericToken.SugarToken, "==")] EQUALSTO,
		[Lexeme(GenericToken.SugarToken, "!=")] NOTEQUALS,
		[Lexeme(GenericToken.SugarToken, "@")] ATSIGN,
		[Lexeme(GenericToken.SugarToken, "[")] LBRACKET,
		[Lexeme(GenericToken.SugarToken, "]")] RBRACKET,
		[Lexeme(GenericToken.SugarToken, "<")] LESSTHAN,
		[Lexeme(GenericToken.SugarToken, "{")] LBRACE,
		[Lexeme(GenericToken.SugarToken, "}")] RBRACE,
		[Lexeme(GenericToken.SugarToken, ">")] GREATERTHAN,
		[Lexeme(GenericToken.SugarToken, "<=")] lESSTHANEQUALS,
		[Lexeme(GenericToken.SugarToken, ">=")] GREATERTHANEQUALS,
		[Lexeme(GenericToken.SugarToken, "->")] BECOMES,
//		[Lexeme(GenericToken.SugarToken, "_")] UNDERBAR,
		#endregion
}